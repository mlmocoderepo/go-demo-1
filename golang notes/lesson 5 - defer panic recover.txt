Foreword:
	Defer 
		Used to delay the execution of a statement until the function exits
		Useful to group "open" and "close" functions together
			Becareful using defer in loops
		Run LIFO order
		Arguments evaluated at the time when the defer is executed, not at the time of call function execution
	Panic
		Occurs when program cannot continue at all
		Don't use when file can't be opened, unless it is critical
		Use for unrecoverable events, e.g. cannot obtain TCP port for a web server
		Function will stop executing 
			deferred functions will still fire
	Recover
		Used to recover from panics
		Only useful in defer functions
		Current function will not attempt to continue, but higher functions in call stack will


//*************************************
//1. Using the defer statement
//Deferred actions are run by the end of the main function
//Take note not to overload the defer of too many functions
//*************************************

func main() {

	//1. Any deferred statement is only run when the main function ends
	fmt.Println("Start")       //1. This will start first
	defer fmt.Println("Later") //3. This is delayed aka 'deferred'
	fmt.Println("End")         //2. This will run next

	//2. Obtain goggle's data from robot.txt
	res, err := http.Get("https://www.google.com/robots.txt")
	if err != nil {
		log.Fatal(err)
	}

	//read all the data and store in the variable robots
	//defer used to close the response ensure the resource is closed only when main ftn ends
	//but it is best not used as there are alot of resources here waiting to be closed
	robots, err := ioutil.ReadAll(res.Body)
	res.Body.Close() //Note: defer not used here
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%s\n", robots)
	fmt.Printf("%T\n", robots)
}


//*************************************
//2. Need to update further why only "start" is printed
//*************************************


func main() {
	//End is never executed
	a := "start"
	defer fmt.Println(a)
	a = "end"
}


//*************************************
//3. Demonstrates the built-in panic ftn used to catch errors when the port 8080 is listening
//*************************************


func main() {
	//Writing a http.handler and and using panic to catch and display error(s)
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		w.Write([]byte("Hello Go"))
	})

	if err := http.ListenAndServe(":8080", nil); err != nil {
		panic(err.Error())
	}
}


//*************************************
//4. Defer statement will still run even after the panic statment is executed
//Note: "end" statement will NOT be executed
//*************************************

func main() {

	//While panic() happens after a defer statement is executed
	//The defer() statement WILL STILL RUN before the main function ends
	fmt.Println("start")
	defer fmt.Println("this was deferred")
	panic("something just happened")
	fmt.Println("end") //However, "end" will not be executed
}


//*************************************
//5. Defer anonymous function will still run even after the panic statment is executed
//Note: "end" statement will NOT be executed
//*************************************

func main() {

	//writing an anonymous defer function
	fmt.Println("start")
	//When the defer statements runs, its anonymous ftn attempts to recover from the panic
	//After all the defer statement is the last to run before the end of the main function
	defer func() {
		if err := recover(); err != nil { //recover stops the panic  and restores normal exec.
			log.Println("ERROR RECOVERED:", err)
		}
	}()
	panic("a forced error triggered here on line 20 happened")
	fmt.Println("end") //However, "end" will not be executed
}


//*************************************
//6. Defer function panick() will run even after the panic statment is executed
//Note: "end" statement WILL BE executed
//This is because defer only scoped within the panick function, ie outside the main function
//Hence, after panic is run, the execution is returned to the main thread, thus
//printing the main function
//*************************************

func main() {

	//5. writing an defer function
	fmt.Println("start") //Pt 1 will run first
	panick()             //Pt 2 will run next
	fmt.Println("end")   //Pt 4 will run last/end
}

func panick() {
	fmt.Println("about to panic") //Pt 2.1 will run there after
	defer func() {
		if err := recover(); err != nil {
			log.Println("ERROR RECOVERED:", err) //Pt 3 will run taking the err from Pt x
		}
	}()
	panic("a forced error triggered here on line 23 happened") //Pt x
	fmt.Println("done panicking")
}
