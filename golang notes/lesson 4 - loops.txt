Foreword: 
Loop statements
	simple loops
		for initializer; test; incrementor{}
		for test{} (e.g. i:=0 for i<5{ i++ })
		for{}
	exit early
		break
		continue
		labels (loop breaker)
	loop over collections / lists
		arrays, slices, maps, strings and channels
		for key, value := range collection{...}

		
package main

import (
	"fmt"
)

func main() {
	// 1. Basic loop statement
	fmt.Println("Basic For Loop")
	for i := 0; i < 5; i++ {
		fmt.Println(i)
	}

	//2. Dual initializer in a for loop
	fmt.Println("Dual initializer in a for loop")
	for i, j := 0, 0; i < 5; i, j = i+1, i+2 {
		fmt.Println(i, j)
	}

	//3. Splitting the initializer of a for loop
	fmt.Println("Splitting the initializer of a for loop")
	var i int = 0
	for i < 5 {
		fmt.Println(i)
		i++
	}

	//4. Perpetual for loop; break tag required
	fmt.Println("Perpetual for loop with break tag to end it")
	j := 0
	for {
		fmt.Println(j)
		j++
		if j > 5 {
			break
		}
	}

	//5. Using a continue tag
	fmt.Println("Using a continue take to skip certain iterations")
	for x := 0; x < 6; x++ {
		if x == 0 || x == 5 {
			continue
		}
		fmt.Println(x)
	}

	//6. Loop within a loop
	fmt.Println("Loop within a loop")

	//6.1 Breaking out of a for loop using a keyword tag
LoopBreaker:
	for i := 1; i <= 3; i++ {
		for j := 1; j <= 3; j++ {
			fmt.Println(i * j)
			if i*j >= 6 {
				break LoopBreaker
			}
		}
	}

	//7. Loop within a range
	// Using an array
	fmt.Println("Looping through an array")
	arr1 := [3]string{"first arr1", "second arr1", "third arr1"}
	for i, v := range arr1 {
		fmt.Printf("%d: %v\n", i+1, v)
	}

	fmt.Println("Looping through an array")
	arr2 := [3]string{"first arr2", "second arr2", "third arr2"}
	for i := 0; i < len(arr2); i++ {
		fmt.Printf("%d: %v\n", i+1, arr2[i])
	}

	//7.1 Loop within a slice
	fmt.Println("Looping through a slice")
	slice1 := []string{"element1", "element2", "element3"}
	for i, v := range slice1 {
		fmt.Printf("%d: %v\n", i+1, v)
	}

	//7.2 Loop through a map
	fmt.Println("Looping through an map")
	mapObj1 := map[int]string{
		1: "mapObj1",
		2: "mapObj2",
		3: "mapObj3",
	}

	//Use a regular for loop if the key of the map are numbered in an order
	fmt.Println("Looping through an map")
	for i := 1; i <= len(mapObj1); i++ {
		fmt.Printf("%d: %v\n", i+1, mapObj1[i])
	}

	//Use a range loop if the map has a string-based key as values
	fmt.Println("Looping through an map")
	mapObj2 := map[string]string{
		"key1": "mapObj1_1",
		"key2": "mapObj2_1",
		"key3": "mapObj3_1",
	}

	for key, value := range mapObj2 { //the map's key and value are used
		fmt.Printf("%s: %v\n", key, value)
	}

	for key := range mapObj2 { //only the key is used; it's ok to do so
		fmt.Printf("%s\n", key)
	}
}
