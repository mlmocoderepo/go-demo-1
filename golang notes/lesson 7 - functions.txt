Foreword:
	Basics
	Parameters
	Return Values
	Anonymous Functions
	Functions as types
	Methods

	Parameters
		Comma delimited list of variables and types
			func foo(bar string, baz int)
		Parameters of the same type list type once
			func foo(bar, baz int)
		When pointers are passed, the function can change the underlying value of the caller
			This is alway true for data for slices and maps
		Use variadic parameters to send list of same types in
			Must be last parameters
			Received as a slice
			func foo(bar string, baz ...int)

	Return values
		Single return values just list type
			func foo() int
		Multiple return values list types surrounded by parenthesis
			func foo() (int, string)
		Can used named return values
			Initializes return variable
			Return using only the return keyword on its own
		Can return address of local variables
			Automatically promoted from local memory(stack) to shared memory(heap)

	Function as types
		Can assign functions to variables or use as arguments and return values in function
		Type signature like function signature, with no parameter names
			var f func(string, string, int) (int, error)

	Methods
		Function that executes in context of a type
		Format
			func (g greeter) greet(){
				...
			}
		Receiver can be value or pointer
			Value receiver gets a copy of type
			Pointer receiver gets pointer to type
	
	Anonymous functions
		Functions that do not have names if they are immediately invoked
			func(){...}()
			or
			a := func{...}()
			a()

	//*************************************
	//1. Basics
	//*************************************

	package main

	// Characteristics of a function

	func main() { //lower cases keep the package internal, and otherwise

	}

	//*************************************
	//2. Parameters
	//*************************************

	// Parameters of a function

	func main() {
		for i := 0; i < 5; i++ {
			sayMessage("Hello Go!", i)
		}
	

	func sayMessage(msg string, index int) {
		fmt.Println(msg)
		fmt.Println("The value of the index is:", index)
		fmt.Println("---")
	}

	// Shorten params - if too verbose - of a function
	// Synthetic sugar

	func main() {
		for i := 0; i < 5; i++ {
			sayHello("Hello", "Andy")
		}
	}

	func sayHello(msg, name string) {
		fmt.Println(msg)
		fmt.Println("The value of the index is:", name)
		fmt.Println("---")
	}

	// Passing by addressof to a function
	// & is not required for maps and slices
	// as they are already stored by address

	func main() {
		greeting := "Hello"
		name := "Stacy"
		for i := 0; i < 5; i++ {
			sayHello(&greeting, name) //greeting, passed by address
		}
	}

	func sayHello(msg *string, name string) {
		fmt.Println(*msg, name)
		fmt.Println("---")
		*msg = "Good bye"
		fmt.Println(*msg, name)
		fmt.Println("---")
	}

	// Pass values as variadic parameters
	// In this example, the ftn takes in a slice of ints and
	// breaks it down using the variadic operator (...)

	func main() {
		sum(1, 2, 3, 4, 5) //passing as variadic params
	}

	func sum(values ...int) { //accepts a slice as variadic a param
		for i, v := range values {
			fmt.Printf("%d: %v\n", i, v) //starts at index 0
		}
	}


	//*************************************
	//3. Return Values
	//*************************************


	// Return by value(s)

	func main() {
		result := sum(1, 2, 3, 4, 5) //passing as variadic params
		fmt.Println("The sum is:", result)
	}

	func sum(values ...int) int { //accepts a slice as variadic a param
		var result int = 0
		for i, v := range values {
			result = result + v
			fmt.Printf("%d: %v\n", i, v) //starts at index 0
		}
		return result
	}

	// Return by address

	func main() {
		result := sum(1, 2, 3, 4, 5)        //passing as variadic params
		fmt.Println("The sum is:", *result) //deref the value from the pointer
	}

	func sum(values ...int) *int { //returns an pointer of an int
		var result int = 0
		for i, v := range values {
			result = result + v
			fmt.Printf("%d: %v\n", i, v) //starts at index 0
		}
		return &result //returns the address storing the value
	}

	// Explicit declaration of return variable(s)
	// Seldom seen or used

	func main() {
		result := sum(1, 2, 3, 4, 5)       //passing as variadic params
		fmt.Println("The sum is:", result) //deref the value from the pointer
	}

	//returns a pointer of an int
	//SELDOM ADOPTED
	//return variable is explicitly declared at the top
	func sum(values ...int) (result int) {

		for i, v := range values {
			result = result + v
			fmt.Printf("%d: %v\n", i, v) //starts at index 0
		}
		return
	}

	// Returning more than 1 value

	func main() {

		var numerator float64
		fmt.Println("Enter a numerator.")
		fmt.Scanf("%f", &numerator)

		var denominator float64
		fmt.Println("Enter a denominator.")
		fmt.Scanf("%f", &denominator)

		d, err := divide(numerator, denominator)
		if err != nil {
			fmt.Println(err)
		} else {
			fmt.Println(d)
		}

	}

	func divide(n, d float64) (float64, error) {
		if d <= 0 {
			return 0, errors.New("Unable to devide when denominator is zero.")
		}

		return n / d, nil
	}

	//*************************************
	//4. Anonymous Functions
	//*************************************

	// Anonymous Function

	func main() {

		func() {
			fmt.Println("Hello Anonymous Function here")
		}()

	}


	// Anonymous Function
	// To conveniently process a value outside the scope of the function
	// But not recommended

	func main() {
		for i := 0; i < 5; i++ {
			func() {
				fmt.Println(i) //this ftn is able to read 'i' outside its scope
			}()
		}
	}

	// Passing values to an Anonymous Function (RECOMMENDED APPROACH)

	func main() {
		for i := 0; i < 5; i++ {
			func(val int) { //the anonymous function receives a value
				fmt.Println(val)
			}(i) //a better approach is to pass 'i' to the function
		}
	}

	//*************************************
	//5. Functions as types
	//*************************************

	// Functions as a variable/type

	func main() {
		// long form
		var e func() = func() {
			fmt.Println("Function e called")
		}
		// short form
		f := func() {
			fmt.Println("Function f called")
		}

		e()
		f()

		// functions as type that receives parameters
		// long form
		var divide func(float64, float64) (float64, error)

		divide = func(num float64, denom float64) (float64, error) {
			if denom <= 0 {
				return 0, errors.New("Cannot divide by less than or equal to 0")
			}
			return num / denom, nil
		}

		var numerator, denominator float64
		fmt.Println("Enter the numerator:")
		fmt.Scanf("%f", &numerator)
		fmt.Println("Enter the denominator:")
		fmt.Scanf("%f", &denominator)
		result, err := divide(numerator, denominator)

		if err != nil {
			fmt.Println(err)
			return
		}

		fmt.Println(result)
	}

	//*************************************
	//6. Methods
	//*************************************

	// Working with methods, by value
	// Methods are like functions, but are related to a variable type

	type greeter struct {
		greeting, name string
	}

	// (g greeter) is a value receiever, received as a value
	func (g greeter) greets() {
		fmt.Printf("%s, %s!\n", g.greeting, g.name)
		g.greeting = ""
		g.name = ""
	}

	func main() {
		newgreeting := greeter{
			greeting: "Hello",
			name:     "Thomas",
		}

		newgreeting.greets()
		newgreeting.greets()
	}


	// Working with methods, by pointer

	type greeter struct {
		greeting, name string
	}

	// (g greeter) is a value receiever, received as a value
	func (g *greeter) greets() {
		fmt.Printf("%s, %s!\n", g.greeting, g.name)
		g.greeting = ""
		g.name = ""
	}

	func main() {
		newgreeting := greeter{
			greeting: "Hello",
			name:     "Thomas",
		}

		newgreeting.greets()
		newgreeting.greets()
	}
